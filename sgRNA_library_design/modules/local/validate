process Validate {

input:
    path(targets, stageAs: 'target.txt')
    path(positive, stageAs: 'positive.txt')
    path(negative, stageAs: 'negative.txt')
    path(editors)
    path(gff_database)
    path(fasta_index)
    path(boyle)

    output:
    path("Study_Target_library.bed"), emit: target_bed
    path("target.ens"), emit: target_ens
    path("negative.ens"), emit: negative_ens
    path("positive.ens"), emit: positive_ens
    path("Positive_Controls_library.bed"), emit: positive_bed , optional: true
    path("Negative_Controls_library.bed"), emit: negative_bed , optional: true
    path("*.err"), emit: errors , optional: true


publishDir "${params.Auxiliary_files}/Genomic_regions/", pattern: "*.bed", mode: "copy"


    script:

def No_CFD = "F"
def CFD_threshold = "F"
def CFD_count = "F"

if ( "$params.CFD_Threshold" == "" || "$params.CFD_Count" == "") {
    No_CFD = "T"
}

else {
    if ( params.CFD_Threshold < 0 || params.CFD_Threshold > 1) {
         CFD_threshold = "T"
     }
// Check if params.CFD_Count is not an integer between [1-10]
    if (!(params.CFD_Count instanceof Integer) || params.CFD_Count < 0 || params.CFD_Count > 10) {
          CFD_count = "T"
    }
}

    """
    #!/usr/bin/env bash
    source ${params.Python_env}
    error_array=()
    good_array=()

    good_array+=("<LI> Parameter Genome : ${params.genome}")
    good_array+=("<LI> Parameter Flanking Region : ${params.Flanking} bp (bases to consider on each side of the selected gene feature)")
    good_array+=("<LI> Parameter Cas9 Orthologue : ${params.casName}")
    good_array+=("<LI> Parameter Default Gene Feature : CDS (feature to be investigated if unspecified)")
    if [ "${params.isoform}" == "MANE_Select" ]; then
      if [ "${params.mane_select}" == 'true' ]; then
      good_array+=("<LI> Parameter isoform : MANE (Isoform analysed will correspond to the MANE project)")
      else 
      error_array+=("<LI> Isofrom specification is invalid, this ${params.genome} does not possess MANE annotation")
      fi
    elif [ "${params.isoform}" == "None" ]; then
      good_array+=("<LI> Parameter isform : None (All isoforms will be considered.)")
    elif [ "${params.isoform}" == "Ensembl_canonical" ]; then
      good_array+=("<LI> Parameter isform : Canonical (canonical isoforms will be considered.)")
    else 
      error_array+=("<LI> Isofrom specification is invalid (accepted : None, canonical, MANE)")
    fi
    good_array+=("<LI> Parameter GC : ${params.GC} (C within GC pattern will not be mutated in mutation prediction if specified)")

if [ ${params.CFD_access} ] ; then
if [ ${No_CFD} == "T" ] ; then
    good_array+=("<LI> sgRNA will not be filtered by off-target (CFD Count or Threshold is not set)")
else
    if [ ${CFD_count} == "T" ]; then
        error_array+=("<LI> The number used for Count threshold (i.e., number of off-targets to eliminate a guide) must be an integer between 0-10")
    fi
    if [ ${CFD_threshold} == "T" ]; then
	error_array+=("<LI> The score threshold for off-target consideration must be between 0 and 1")
    fi
good_array+=('<LI> Parameter Count Threshold: guides with more than ${params.CFD_Count} off-targets of score >= ${params.CFD_Threshold} are filtered')
fi
else
  good_array+=("<LI> CFD cannot be calculated")
fi
if [ -n "${params.Boyle_Lab}" ] ; then
        boyler="-e ${boyle}"
fi
ls -lh ${boyle}

    awk '!seen[\$2]++ {print \$1"\\t"\$2}' $fasta_index > fasta.sizes
    validate.py -T ${targets} -N ${negative} -P ${positive} -I ${params.isoform} -G ${gff_database} -o out.bed -B ${params.Flanking} -c fasta.sizes \${boyler} --editors ${editors} -L ${params.limit_bp}
   
   if [ -e errors.err ]; then
    mapfile -t new_lines < "errors.err"
    error_array+=("\${new_lines[@]}")
   fi

    if [ "\${#error_array[@]}" -gt 0 ]; then
     	echo "::group type=error::"
     	echo "<b> The following error were detected : </b>"
     	for t in "\${error_array[@]}"; do
     	echo "\$t"
     	done
	echo "\n"
     	echo "::endgroup::"
     	exit 1
    elif [ -e fetch.err ]; then
      mapfile -t new_lines < "fetch.err"
      error_array+=("\${new_lines[@]}")
      echo "::group type=error::"
      echo "<b> The following error were detected : </b>"
      for t in "\${error_array[@]}"; do
    	 echo "\$t"
      done
      echo "\n"    
      echo "::endgroup::"
      if [ -e suggestion.err ]; then
        mapfile -t new_lines < "suggestion.err"
        sugession=("\${new_lines[@]}")
        echo "::group type=error::"
        echo "<b> Based on the genes not found in the database we think these are similar : </b>"
        echo "<UL>"
        for t in "\${sugession[@]}"; do
                 echo "<LI>\${t}"
        done
        echo "</UL>"
        echo "* These suggestion are purely based on character similarity (thus have strong limitation) "
        echo " You can find the full list of genes availlable in the chosen database at https://cerc-genomic-medicine.ca/exampleGeneOfInterest.txt"
        echo "\n"
        echo "::endgroup::"
      fi      
      exit 3
    elif [ -e editors.err ]; then
      echo "::group type=error::"
      echo "<b> The following error were detected : </b>"
      while IFS= read -r line; do
        echo "\$line"
        done < editors.err
      echo "\n"
      echo "::endgroup::"
      exit 2
    else
        echo "::group type=message::"
	echo " <b> Parameter List : </b>"
	echo "<UL>"
	echo "<LI> \$(grep -c ^ target.txt) entries as gene(s) of interest"
	echo "<LI> \$(grep -c ^ negative.txt) entries as negative control gene(s)"
	echo "<LI> \$(grep -c ^ positive.txt) entries as positive control gene(s)"
        for t in "\${good_array[@]}"; do
          echo "\$t"
        done
	echo "</UL> \n"
	echo "::endgroup::"
     fi

    """
}
