<html>
  <head>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    />
    <head>
      <script
        src="//unpkg.com/react@16/umd/react.development.js"
        crossorigin
      ></script>
      <script
        src="//unpkg.com/react-dom@16/umd/react-dom.development.js"
        crossorigin
      ></script>
      <script
        src="//unpkg.com/@jbrowse/react-linear-genome-view/dist/react-linear-genome-view.umd.development.js"
        crossorigin
      ></script>
    </head>
    <style>
      #table_detail tr.clickable:hover {
        background-color: #f2f2f2;
        cursor: pointer;
      }

      /* Visual indicator for the selected row */
      #table_detail tr.selected {
        background-color: #d1ecf1; /* Light blue background to indicate selection */
      }

      #wrapper {
        margin: 20px auto;
        width: 80%;
      }

      /* Style for the content inside the collapsible row */
      .collapse-content {
        padding: 15px;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
      }

      /* Remove default padding/margin from the collapsible row */
      .collapse-row td {
        padding: 0 !important;
        border-top: none;
      }
    </style>
  </head>

  <body>
    <div id="jbrowse_linear_genome_view" style="display: none"></div>
    <div id="wrapper">
      <table class="table table-hover" id="table_detail">
        <thead id="table_header" class="thead-dark">
          <!-- Table headers will be inserted here dynamically -->
        </thead>
        <tbody id="table_body">
          <!-- Table rows will be inserted here dynamically -->
        </tbody>
      </table>
    </div>

    <script type="module">
      var currentURL = window.location.href;

      // Remove the last part after the final "/"
      var baseURL = currentURL.substring(0, currentURL.lastIndexOf("/"));
      console.log(`${baseURL}/ancillary_files/report_summary.json`);
      let firstRangeValue = null;
      var currentURL = window.location.href;
      var baseURL = currentURL.substring(0, currentURL.lastIndexOf("/"));
      $.getJSON(`${baseURL}/ancillary_files/report_summary.json`).then(
        (data) => {
          if (
            Array.isArray(data) &&
            data.length > 0 &&
            data[0].range !== undefined
          ) {
            firstRangeValue = data[0].range;
            console.log("firstRangeValue:", firstRangeValue);

            //      const mimeType = 'application/javascript'
            //      import assembly from '/script/assembly.js'
            //      import tracks from '/script/tracks.js'
            var currentURL = window.location.href;

            // Remove the last part after the final "/"
            var baseURL = currentURL.substring(0, currentURL.lastIndexOf("/"));
            console.log(`${baseURL}/ancillary_files/report_summary.json`);
      const { createViewState, loadPlugins, JBrowseLinearGenomeView } =
        JBrowseReactLinearGenomeView;
      const { createElement } = React;
      const { render } = ReactDOM;
      console.log(JBrowseReactLinearGenomeView);
      const state = createViewState({
        assembly: {
          name: "{{genome}}",
          sequence: {
            type: "ReferenceSequenceTrack",
            trackId: "ReferenceSequenceTrack",
            adapter: {
              type: "BgzipFastaAdapter",
              fastaLocation: {
                uri: "{{fasta_url}}",
                locationType: "UriLocation",
              },
              faiLocation: {
                uri: "{{fasta_index_url}}",
                locationType: "UriLocation",
              },
              gziLocation: {
                uri: "{{fasta_gz_gzi}}",
                locationType: "UriLocation",
              },
            },
          },
        },
        tracks: [
          {
            type: "FeatureTrack",
            trackId: "knownGene",
            name: "UCSC geneidPep",
            category: ["Annotation"],
            assemblyNames: ["{{genome}}"],
            adapter: {
              type: "Gff3Adapter",
              gffLocation: {
                type: "fileLocation",
                uri: "{{gff3_url}}",
                locationType: "UriLocation",
              },
            },
          },
          {
            type: "AlignmentsTrack",
            trackId: "sgRNA",
            name: "sgRNA CRISPR-BE",
            category: ["1000 Genomes", "Alignments"],
            assemblyNames: ["{{genome}}"],
            adapter: {
              type: "BamAdapter",
              bamLocation: {
                uri: `${baseURL}/ancillary_files/sgRNA_location.bam`,
                locationType: "UriLocation",
              },
              index: {
                location: {
                  uri: `${baseURL}/ancillary_files/sgRNA_location.bam.bai`,
                  locationType: "UriLocation",
                },
              },
              sequenceAdapter: {
                type: "BgzipFastaAdapter",
                fastaLocation: {
                  uri: "{{fasta_url}}",
                  locationType: "UriLocation",
                },
                faiLocation: {
                  uri: "{{fasta_index_url}}",
                  locationType: "UriLocation",
                },
                gziLocation: {
                  uri: "{{fasta_gz_gzi}}",
                  locationType: "UriLocation",
                },
              },
            },
          },
        ],
        location: firstRangeValue,
        defaultSession: {
        name: "my session",
          view: {
            id: "linearGenomeView",
            type: "LinearGenomeView",
            tracks: [
              {
                id: "T6uhrtY40O",
                type: "AlignmentsTrack",
                configuration: "sgRNA",
                minimized: false,
                displays: [
                  {
                    id: "FinKswChSr",
                    type: "LinearAlignmentsDisplay",
                    PileupDisplay: {
                      id: "YAAaF494z",
                      type: "LinearPileupDisplay",
                      height: 134,
                      configuration: {
                        type: "LinearPileupDisplay",
                        displayId:
                          "sgRNA-LinearAlignmentsDisplay_LinearPileupDisplay_xyz",
                      },
                      showSoftClipping: false,
                      filterBy: {
                        flagInclude: 0,
                        flagExclude: 1540,
                      },
                    },
                    SNPCoverageDisplay: {
                      id: "VTQ_VGbAVJ",
                      type: "LinearSNPCoverageDisplay",
                      height: 45,
                      configuration: {
                        type: "LinearSNPCoverageDisplay",
                        displayId:
                          "sgRNA-LinearAlignmentsDisplay_snpcoverage_xyz",
                      },
                      selectedRendering: "",
                      resolution: 1,
                      constraints: {},
                      filterBy: {
                        flagInclude: 0,
                        flagExclude: 1540,
                      },
                    },
                    snpCovHeight: 45,
                    configuration: "sgRNA-LinearAlignmentsDisplay",
                    height: 179,
                    lowerPanelType: "LinearPileupDisplay",
                  },
                ],
              },
              {
                id: "IpTYJKmsp",
                type: "FeatureTrack",
                configuration: "knownGene",
                displays: [
                  {
                    id: "FinKswChSr",
                    type: "LinearBasicDisplay",
                  },
                ],
              },
            ],
            hideHeader: true,
            hideHeaderOverview: true,
            hideNoTracksActive: true,
            trackSelectorType: "hierarchical",
            showCenterLine: false,
            showCytobandsSetting: false,
            trackLabels: "hidden",
            showGridlines: false,
            highlight: [],
            colorByCDS: false,
            showTrackOutlines: false,
            showBookmarkHighlights: false,
            showBookmarkLabels: false,
          },
        },
      });
            window.jbrowseState = state;
      render(
        createElement(JBrowseLinearGenomeView, { viewState: state }),
        document.getElementById("jbrowse_linear_genome_view"),
      );
                }
        },
      );

      $("#jbrowse_linear_genome_view");

      $(document).ready(function () {
        var selectedRow = null;

        // Load the JSON data
        $.getJSON(
          `${baseURL}/ancillary_files/report_summary.json`,
          function (data) {
            var tableHeader = $("#table_header");
            var tableBody = $("#table_body");

            if (data.length > 0) {
              // Get keys from the first object
              var keys = Object.keys(data[0]);

              // Exclude keys that should not be in the main table
              var excludeKeys = ["range"];

              // Generate the table headers dynamically
              var headerRow = $("<tr/>");
              keys.forEach(function (key) {
                if (!excludeKeys.includes(key)) {
                  // Capitalize the first letter and replace underscores with spaces
                  var headerTitle =
                    key.charAt(0).toUpperCase() +
                    key.slice(1).replace(/_/g, " ");
                  headerRow.append($("<th/>").text(headerTitle));
                }
              });
              tableHeader.append(headerRow);

              // Build the table body
              $.each(data, function (index, item) {
                var collapseId = "collapse" + index;

                // Create the main row
                var mainRow = $("<tr/>", {
                  "data-toggle": "collapse",
                  "data-target": "#" + collapseId,
                  "aria-expanded": "false",
                  "aria-controls": collapseId,
                  class: "clickable",
                  "data-index": index,
                });

                // Add data to the main row
                keys.forEach(function (key) {
                  if (!excludeKeys.includes(key)) {
                    var cellValue = item[key];

                    // Format numbers if necessary
                    if (typeof cellValudde === "number" && key === "salary") {
                      cellValue = cellValue.toLocaleString();
                    }

                    mainRow.append($("<td/>").text(cellValue));
                  }
                });

                // Create the collapsible row
                var collapseRow = $("<tr/>", {
                  id: collapseId,
                  class: "collapse collapse-row",
                });

                var collapseContent = $("<td/>", {
                  colspan: keys.length,
                });

                // Content inside the collapsible row
                //var contentDiv = $('<div/>', {
                //    'class': 'collapse-content'
                //}).html('');

                //collapseContent.append(contentDiv);
                collapseRow.append(collapseContent);

                // Append the rows to the table body
                tableBody.append(mainRow);
                tableBody.append(collapseRow);
              });

              // Add click event to handle visual indicators and smooth transitions
              $(".clickable").on("click", function () {
                var clickedRow = $(this);
                var index = clickedRow.data("index");
                var item = data[index];
                var collapseId = "collapse" + index;
                var elementToMove = document.getElementById(
                  "jbrowse_linear_genome_view",
                );
                elementToMove.style.display = "block";
                var destination =
                  document.getElementById(collapseId).children[0];
                destination.appendChild(elementToMove);
                window.jbrowseState.session.view.navToLocString(item["range"]);
                var isAlreadySelected = clickedRow.hasClass("selected");

                // Remove 'selected' class from any other row
                $(".clickable").not(this).removeClass("selected");
                // Collapse any other open collapses
                $(".collapse.show")
                  .not("#" + collapseId)
                  .collapse("hide");

                if (isAlreadySelected) {
                  // If the same row is clicked again, remove the 'selected' class after collapse animation
                  $("#" + collapseId).on("hidden.bs.collapse", function () {
                    clickedRow.removeClass("selected");
                    $("#" + collapseId).off("hidden.bs.collapse");
                  });
                } else {
                  // Add 'selected' class to the clicked row
                  clickedRow.addClass("selected");
                }
              });

              // Handle collapse show/hide events to manage 'selected' class
              $(".collapse").on("show.bs.collapse", function () {
                var collapseId = $(this).attr("id");
                var index = collapseId.replace("collapse", "");
                var clickedRow = $('.clickable[data-index="' + index + '"]');

                // Add 'selected' class to the clicked row
                clickedRow.addClass("selected");
              });

              $(".collapse").on("hide.bs.collapse", function () {
                var collapseId = $(this).attr("id");
                var index = collapseId.replace("collapse", "");
                var clickedRow = $('.clickable[data-index="' + index + '"]');

                // Remove 'selected' class from the clicked row
                clickedRow.removeClass("selected");
              });
            } else {
              // Handle case where data is empty
              tableBody.append(
                $("<tr/>").append(
                  $("<td/>", {
                    colspan: 1,
                  }).text("No data available."),
                ),
              );
            }
          },
        ).fail(function () {
          alert(
            "Error loading data. ${baseURL}/ancillary_files/report_summary.json",
          );
        });
      });
    </script>
  </body>
</html>

